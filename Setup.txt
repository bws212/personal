SETUP SSH AND PYCHARM

For PyCharm: 
Open git bash: go to ml4ms
checkout a new branch: git checkout -b <name>
Now, open PyCharm
make a new project with appropriate venv
USE TOUCH <new_file_name> TO MAKE A NEW FILE WHILE IN cd: personalrepo
THE VENV SHOULD BE IN ML4MS FROM POWERSHELL
ALSO,ANY EXISTING REPO/FOLDER CAN BECOME A PROJECT IF YOU JUST OPEN IT__ JUST MAKE SURE YOU ARE IN REIGHT VENV
check to make sure it is in the right branch and repo: at top in VC tab
Work on file
open git bash- all in editing branch
# Navigate to the directory where the file is located
cd path/to/your/file

USE git add .    TO ADD ALL EDITED FILED

# Add the specific file to the staging area
git add filename

# Commit the changes
git commit -m "Your commit message"


git add "<>"
git commit -m 
git push origin main
pull request in github



ml4ms in git bash has an origin of msae...-P and an upstream of simon
personal repo has an origin of personal repo

ALways use f"my variable {my_variable}" isntead of "my variable: {}".format(...)


For PR: make new branch that's copy of main: edit in this branch, push this branch to origin, so now origin has two branches
PR new branch to match with upstream main
#Then back to local, pull upstream main and sync to local main: So now edits are in main in the upstream
#Then delete new branch: git branch -d <name>
git push origin --delete <name>


Gen: Always build new branch off of fully synced main: then edit, push origin, PR new branch and upstream main
#then pull upstream to local main: delete edited branch as it is now redundant

Never commit to main in LOCAL:: git pull upstream main to reset:: always make a new branch and push that to origin than PR to upstream, then sync all with main and delete edit branches

ONLY THING YOU EVER USE MAIN FOR IS TO MAKE NEW BRANCHES THAT ARE SYNCED WITH UPSTREAM

git branch --merged: tells you 
Don't Ever WOrk IN GITHUB, do all in GIT then push to origin
#Don't synch main in origin and remote, doesn't matter, just sync to local??

For assn: fully sync to upstream on local and remote
make a new branch on local- which is copy of upstream main/local main
add file to assignments/1git in this new branch
push this new branch to origin
PR this branch with central main
after accepted: sync local and remote main with upstream main
Delete edit branch from local and origin



General: All powershell, make files code etc
Keep assignments in Assignments in JUpyter Lab so can upload directly in Assignments Folder: Make sure Repo and Jupyter Setup is the same
This allows for much easier transfer between the folders, no need to move stuff around. SHould be set up this way
Then open git bash

If commits haven't been resolved: 
git fetch upstream
git reset --hard upstream/main
git push -f origin main
To reset personal repo to match simon's repo

use git add <file_name> to add file to local repo
use git commit -m "<message>" to save changes 
use git push origin main to fix remote repo

if needed: use mv to move into new folder, but should be way to do it more easily:






First: Open terminal, create a new environment: conda create --name <name>
then add packages etc w install, should already have jupyter and mamba since they are in base
use mamba install <package>
Also conda-forge should already be channel

IDK about Git

4. Create a Conda Environment:
Create a new Conda environment for your project. Open a terminal and run:

bash
Copy code
conda create --name your_env_name python==3.9
conda activate your_env_name
Replace your_env_name with the desired name for your environment.

6. Create a Git Repository:
Create a new Git repository for your project. Navigate to your project directory and run:

bash
Copy code
git init
7. Connect Git to GitHub:
Connect your local Git repository to your GitHub repository:

bash
Copy code
git remote add origin https://github.com/bws212/your_repo.git
Replace your_repo with the name of your GitHub repository.


8. Create a Jupyter Notebook:
Create a new Jupyter Notebook in your project directory:
###Set up kernel 
We need to run a program called ipykernel that comes as part of jupyter to make our new environment visible in Jupyter:

python -m ipykernel install --user --name ml4ms-skl --display-name "Python (ml4ms-skl)" After you run this, you will have to refresh your web-page for it to appear, but then clicking on the kernel and then on the drop-down menu, you should see your conda environment there in Jupyter.
You will have to rerun ipykernel for each new environment that you create to make it available in the dropdown menu.

bash
Copy code
jupyter notebook
9. Write Code:
Write your code in the Jupyter Notebook.

10. Save and Commit Changes:
Save your Jupyter Notebook and then commit your changes using Git:



bash
Copy code
git add .
git commit -m "Your commit message"
11. Push Changes to GitHub:
Push your changes to your GitHub repository:

bash
Copy code
git push origin main
Replace main with the name of your branch if it's different.

12. Collaborate and Update:
If you're working with others, remember to pull changes before pushing:
bash
Copy code
git pull origin main
git push origin main


This worked when I had created the repo on git, cloned it to local, and then opened jupyter and made two filed, then saved them, and uploaded with the following sequence

BSchwartz@Ben-1 MINGW64 ~/ml4ms/test (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   Untitled.ipynb
        new file:   check.ipynb

BSchwartz@Ben-1 MINGW64 ~/ml4ms/test (main)
$ git commit -m "Add Untitled.ipynb and check.ipynb"
[main a50da07] Add Untitled.ipynb and check.ipynb
 2 files changed, 49 insertions(+)
 create mode 100644 Untitled.ipynb
 create mode 100644 check.ipynb

BSchwartz@Ben-1 MINGW64 ~/ml4ms/test (main)
$ git push origin main
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 804 bytes | 804.00 KiB/s, done.
Total 4 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/bws212/test.git
   f563dab..a50da07  main -> main


